<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peter Glennon]]></title>
  <link href="http://pcrglennon.github.io/atom.xml" rel="self"/>
  <link href="http://pcrglennon.github.io/"/>
  <updated>2014-09-10T13:54:16-04:00</updated>
  <id>http://pcrglennon.github.io/</id>
  <author>
    <name><![CDATA[Peter Glennon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Working around Google Maps API changes]]></title>
    <link href="http://pcrglennon.github.io/blog/2014/09/04/working-around-google-maps-api-changes/"/>
    <updated>2014-09-04T15:54:50-04:00</updated>
    <id>http://pcrglennon.github.io/blog/2014/09/04/working-around-google-maps-api-changes</id>
    <content type="html"><![CDATA[<p>A few days before the Flatiron School Science Fair, where we were to demo what we&rsquo;ve built to potential employers, a classmate noticed the Google Maps aspect of their app was hopelessly broken.  And then someone else&rsquo;s app had broken.  And then mine had as well.</p>

<h3>geometry.location.K refers to latitude, naturally!</h3>

<p>In my first experiences with the Maps API, I relied on the structure of the JSON response from the API instead of reading the documentation like I should have.  From looking into the response, the variable that contained a coordinate&rsquo;s longitude seemed to be named <code>K</code>, and the latitude variable was named <code>a</code>.  I thought this was weird, but was in a rush to get Maps working, so I just wrote something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">latitude</span> <span class="o">=</span> <span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that worked, until it didn&rsquo;t.  The bug that crashed every Flatiron app that used Google Maps boiled down to this: the reponse now referred to longitude as <code>b</code>, instead of <code>a</code>.  What the hell?  I was too busy at the time to think about why that should happen, so just changed my code to use <code>b</code> instead.</p>

<p>Fortunately, that fix held through the Science Fair, but broke again a few days later!  After some discussion with classmates, we found a <a href="http://stackoverflow.com/questions/13499111/google-maps-geocoder-geocode-geometry-location-lat-lng-property-names-change-f">StackOverflow question</a> with a near-identical issue.  The solution was to use the <code>latitude()</code> and <code>longitude()</code> methods of the Google Maps <code>LatLng</code> object, instead of the arbitrarily-named variables <code>a</code>, <code>b</code>, <code>K</code>, etc. which appear to change frequently and without warning.</p>

<p>After looking back over the docs for the <a href="https://developers.google.com/maps/documentation/javascript/reference#LatLng">Maps API</a>, it turns out those methods were both documented.  So my classmates and I could have avoided the whole issue by following that classic four-letter piece of advice: RTFM.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting a new Sinatra App from Scratch]]></title>
    <link href="http://pcrglennon.github.io/blog/2014/07/20/starting-a-new-sinatra-app-from-scratch/"/>
    <updated>2014-07-20T13:49:52-04:00</updated>
    <id>http://pcrglennon.github.io/blog/2014/07/20/starting-a-new-sinatra-app-from-scratch</id>
    <content type="html"><![CDATA[<p>My friend <a href="https://github.com/jusjmkim">Justin</a> and I are working on a small app to present at The Flatiron School in two weeks.  The app itself isn&rsquo;t hugely interesting: we&rsquo;re basically allowing a user to save a point on a Google Map and share it.  And really, that&rsquo;s just repeating some functionality of Google Maps itself.</p>

<p>Since the app will be relatively small and simple, we decided to use Sinatra instead of Rails.  One of the more interesting challenges we&rsquo;ve faced so far is setting up the framework of the app itself.  It&rsquo;s easy to get used to all the scaffolding you get by just typing <code>rails new</code>.  Starting from an empty folder was really a project in itself, when you haven&rsquo;t done it before.</p>

<p>Of course, there are a number of apps which set up the structure of a barebones Sinatra app (such as <a href="https://github.com/maccman/trevi">Trevi</a> or <a href="https://github.com/c7/hazel">Hazel</a>), but we decided to do it by hand.</p>

<p>Here&rsquo;s what we did, in a very rough order:</p>

<h3>Gemfile:</h3>

<p>I don&rsquo;t think I had ever created a Gemfile before.  I always relied on it just&hellip;being there.  Fortunately, <a href="http://bundler.io/">Bundler</a> has quick setup instructions right on its homepage.</p>

<p>Setting up the Gemfile by hand also forced Justin and I to make decisions about what we REALLY needed for our app.  We chose to do without ActiveRecord, as the app will only have one table and maybe 5-6 SQL queries all told.  In a similar vein, we had to stop and think about which gems are needed in which environment.</p>

<h3>Environment file/Configuration file:</h3>

<p>Getting everything to work together was definitely the most difficult part.  Again, I&rsquo;m used to a Rails app, where it just works right away.  We had to go back to old exercises from Flatiron to set up the <code>environment.rb</code> file.</p>

<p>Step 1: Ensure there is a variable set (in ruby&rsquo;s global <code>ENV</code> hash) which represents which environment to use.  Default to &lsquo;environment&rsquo;.  i.e. something like `ENV[&ldquo;SINATRA_ENV&rdquo;] ||= &lsquo;development&rsquo;.  <strong>Note:</strong> we have yet to deploy this to production, so it&rsquo;s possible this won&rsquo;t be enough.</p>

<p>Step 2: Require bundler, and use it to require all gems for the environment in use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'><span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;SINATRA_ENV&#39;</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 3: Set up the DB connection (if using a DB, that is).  We used SQLite3, again for simplicity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DB</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:conn</span> <span class="o">=&gt;</span> <span class="ss">SQLite3</span><span class="p">:</span><span class="ss">:Database</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;./db/your_db.db&quot;</span><span class="p">)}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 4: Requiring your Ruby source files.  In this tiny project, we really only had one file to require (the &lsquo;Map&rsquo; model which stores a name and a coordinate), so this was easy.  In a larger project, it would be best to use something like <a href="https://github.com/jarmo/require_all">require_all</a>.</p>

<h3>The Sinatra App and config.ru</h3>

<p>And of course, we need an actual Sinatra Application, and a means of running it!  There are (at the moment) only 3 routes needed, so we bundled them all into a file called <code>app.rb</code>, which lives in our root folder.  That app does 4 things:</p>

<ol>
<li><code>require /.config/environment</code>.  Duh.</li>
<li>Extend <code>Sinatra:Base</code></li>
<li>Set up route handlers.  In our case, this is just <code>get '/'</code>, &lsquo;<code>post '/'</code>, and <code>get '/:map_name'</code>.</li>
<li>Other configuration options. For us, we had to set up a file to store our Google Maps API key, and make sure that key is accessible by the application.  We used the common pattern of creating a file <code>config.yml</code> which we don&rsquo;t track in version control (not wanting to expose our key to the world!), and loading configuration options using Sinatra&rsquo;s <code>set</code>.</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">configure</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">yaml</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s2">&quot;config/config.yml&quot;</span><span class="p">)</span><span class="o">[</span><span class="n">settings</span><span class="o">.</span><span class="n">environment</span><span class="o">.</span><span class="n">to_s</span><span class="o">]</span>
</span><span class='line'>  <span class="n">yaml</span><span class="o">.</span><span class="n">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>    <span class="n">set</span><span class="p">(</span><span class="n">key</span><span class="o">.</span><span class="n">to_sym</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to run this app, all we have to do to is set up the <code>config.ru</code> file.  Once again, thanks to the simplicity of our app, this is easy.  Only two lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;./app&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="no">App</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>rackup</code> in your terminal, point your browser to localhost:9292, and you&rsquo;re good to go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Between a Proc and a Hard Place]]></title>
    <link href="http://pcrglennon.github.io/blog/2014/07/08/between-a-proc-and-a-hard-place/"/>
    <updated>2014-07-08T12:50:36-04:00</updated>
    <id>http://pcrglennon.github.io/blog/2014/07/08/between-a-proc-and-a-hard-place</id>
    <content type="html"><![CDATA[<p>Before I get into talking about Procs, I should address something.  If you came here because StackOverflow is down and this blog showed up on Google (that&rsquo;s ambitious), skip to the next section.</p>

<p>I never felt the desire to write a blog before The Flatiron School, where student blogs are required.  There are so many blogs, and writing another just seems to me like a drop in the bucket.  And the bucket is more like a reservoir.  There&rsquo;s a lot of great blogs on the internet, and a lot of crappy ones.  And between them, it seems to me like everything of interest has already been written and re-written.  For instance, while researching how Procs work, I found two excellent posts from <a href="http://www.skorks.com/2013/04/ruby-ampersand-parameter-demystified/">skorks.com</a> and <a href="http://www.iain.nl/going-crazy-with-to_proc">iain.nl</a>.  Really, those posts are much better written than this one will be, and I heartily encourage anyone reading this (if there is anyone reading this) to check those out first.  Effectively I&rsquo;m just rehashing what I learned from those blogs.</p>

<p>So why blog?  Well, for selfish reasons.  Writing my last two blog posts really helped me understand the concepts I was writing about, much like explaining your code to someone else helps you understand as well.  So maybe this won&rsquo;t help anyone but myself, but as long as Github Pages are free, I&rsquo;ll probably keep writing for a while.  This is the reasoning for the subtitle of this blog: at the end of the day, it does feel like I&rsquo;m just talking to myself, explaining things to nobody.</p>

<p>Alright, that&rsquo;s enough of that.  On to the actual post.</p>

<h2>Ok, Procs</h2>

<p>Put simply, a Proc is a block object.  That is, you can assign a Proc to a variable and re-use it.  blocks are one of the few non-object elements in the Ruby language, and Procs are used to remedy this.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a_block</span> <span class="o">=</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>          <span class="c1">#=&gt; Syntax Error!</span>
</span><span class='line'><span class="n">a_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">}</span>  <span class="c1">#=&gt; Success!</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a_proc</span><span class="p">)</span>           <span class="c1">#=&gt; [2, 3, 4]</span>
</span></code></pre></td></tr></table></div></figure>


<p>That ampersand before a method argument (in this case, <code>a_proc</code>) is used to explicitly convert the method argument to a Proc.  In this example, the conversion is not necessary, but the ampersand is <em>still required.</em></p>

<p>Procs are also used in method definitions, to assign a variable to whatever block is passed to the method.  This is incredibly useful when you want to re-use the block within the method body.</p>

<p>Here&rsquo;s an example lovingly stolen from my Flatiron classmate <a href="http://bajh.github.io/">Brandon Hopkins</a>.  This is the <code>each</code> method from a Binary Search Tree implementation, which performs an in-order traversal of the tree:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">left</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">left</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">block</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">right</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">right</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The method takes a block, which is converted to a Proc and assigned to the variable <code>block</code>.  <code>block</code> is called with <code>data</code> (the value at this node of the BST) and reused for the <code>each</code> method of both the <code>left</code> and <code>right</code> sub-trees of the BST.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The (&amp;:) syntactic sugar]]></title>
    <link href="http://pcrglennon.github.io/blog/2014/06/25/the-and-syntactic-sugar/"/>
    <updated>2014-06-25T21:43:44-04:00</updated>
    <id>http://pcrglennon.github.io/blog/2014/06/25/the-and-syntactic-sugar</id>
    <content type="html"><![CDATA[<p>While trying to figure out how to capitalize every word in a sentence (for a Ruby project), I came across some syntax I&rsquo;d never seen before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I tried it out in irb, and sure enough, it seemed to do what I wanted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;world&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:capitalize</span><span class="p">)</span>    <span class="c1">#=&gt; [&#39;Hello&#39;, &#39;World&#39;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>It looks like the (&amp;), together with a symbolized method name, applys that method to each element in the collection.  And that&rsquo;s pretty much the short answer.  So if you just needed to figure out how to use it, no need to go further!</p>

<h3>It&rsquo;s actually a bit more complicated</h3>

<p>I was reminded of a similar shortcut in Scala:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">capitalize</span><span class="o">)</span>
</span><span class='line'><span class="c1">// Equivalent to</span>
</span><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">word</span> <span class="k">=&gt;</span> <span class="n">word</span><span class="o">.</span><span class="n">capitalize</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>_</code> acts as a placeholder for the current element being iterated over.  With this in mind, my first thought of the ruby syntax was that <code>&amp;</code> was encapsulating the current element, along with a <code>send</code>.  So it would really boil down to something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">words</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="n">word</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:capitalize</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Though it effectively works this way, the actual process going on is more complicated.  Probably more complicated than I can adequately explain, but I&rsquo;m going to try in my next post.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby's Hash.new and {}]]></title>
    <link href="http://pcrglennon.github.io/blog/2014/06/10/rubys-hash-dot-new-and-%7B%7D/"/>
    <updated>2014-06-10T21:18:18-04:00</updated>
    <id>http://pcrglennon.github.io/blog/2014/06/10/rubys-hash-dot-new-and-{}</id>
    <content type="html"><![CDATA[<p>In a recent lab exercise at Flatiron, we were tasked with tallying the occurences of a word in a given sentence.  My first shot, as a Ruby newbie (Rubie?  Nuby?):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">count_words</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span>
</span><span class='line'>  <span class="n">occurences</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">occurences</span><span class="o">[</span><span class="n">word</span><span class="o">]</span>
</span><span class='line'>      <span class="n">occurences</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">occurences</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">occurences</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it worked.  But it felt bulky, like there must be a more concise way.  Looking over the spec file, I saw a comment which advised using <code>Hash.new(0)</code> rather than <code>{}</code>.  There were two things I didn&rsquo;t understand.  1: that <code>Hash.new</code> and <code>{}</code> were different, and 2: that it looked like you could pass <code>Hash.new</code> an argument!</p>

<h3>Hash.new(0)?</h3>

<p>Googling &ldquo;Ruby Hash.new vs. braces&rdquo; led to <a href="http://www.developwithpurpose.com/ruby-hash-awesomeness-part-1/">this blog post</a> elaborating on the differences between the two methods of hash construction.  Constructing as hash like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">hash</span> <span class="o">=</span> <span class="p">{</span><span class="s2">&quot;a&quot;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;b&quot;</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>allows you to initialize the hash with data all on one line.  Whereas using <code>Hash.new</code> can only return an empty hash.  What <code>Hash.new</code> can do, though, is accept an argument.  As the author of that post points out, that argument is the default value for the hash, in place of <code>nil</code>.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hash_1</span> <span class="o">=</span> <span class="p">{}</span>          <span class="c1"># Empty hash</span>
</span><span class='line'><span class="n">hash_1</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span>           <span class="c1"># nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">hash_2</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># Empty hash</span>
</span><span class='line'><span class="n">hash_2</span><span class="o">[</span><span class="ss">:a</span><span class="o">]</span>           <span class="c1"># 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was perfect!  If I could set the default value for my <code>occurences</code> hash to 0, I could eliminate most of the code in my each block, reducing it to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|</span>
</span><span class='line'>    <span class="n">occurences</span><span class="o">[</span><span class="n">word</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works because <code>occurences[word] += 1</code> really means <code>occurences[word] = occurences[word] + 1</code>. As the default value of <code>occurences</code> is 0, whenever a new word is found, <code>occurences[word]</code> is set to 0 + 1.  The tests pass, and I&rsquo;m satisfied.  On to the next one.</p>

<h3>Hash.new([]): humbled again</h3>

<p>Next problem: organize a list of songs, in the format of an &ldquo;Artist &ndash; Song&rdquo; String, into a hash of this format: artist => array of songs.  With my newfound knowledge of default Hash values, I jumped in like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">organize_songs_by_artist</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">songs_by_artist</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>    <span class="n">artist</span><span class="p">,</span> <span class="n">song_name</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">songs_by_artist</span><span class="o">[</span><span class="n">artist</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">songs_by_artist</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>With an empty array as the default Hash value, this should work just like the previous question!  Right?</p>

<p>Well no, of course it didn&rsquo;t.  I was returned an empty hash.  I look back over my code, and try some quick tests in irb, to no avail.  Puzzled, I throw myself once again upon the mercy of Google.</p>

<p>As often happens, I found a <a href="http://stackoverflow.com/questions/2552579/ruby-method-array-not-updating-the-array-in-hash">StackOverflow question</a> from somehow having a very similar problem.  They&rsquo;re using yet another method of initializing a Hash, using a block:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span><span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t know you could do that, but looking at the <a href="http://www.ruby-doc.org/core-2.1.2/Hash.html#method-c-new">Hash documentation</a> explains that this method will cause the block to execute and return a default value.  That&rsquo;s pretty neat, but the same problem is present.  It looks like nothing shoveled onto the default empty array is saved.</p>

<p><a href="http://stackoverflow.com/a/2552946/3536464">The top answer</a> does an excellent job of explaining this confusing behavior.</p>

<p>I don&rsquo;t think I fully understand it, but what I got from this answer is that when I call <code>songs_by_artist[artist] &lt;&lt; song_name</code> for an artist that is not yet in the hash, it evaluates to this: <code>[] &lt;&lt; song_name</code>.  So the value DOES get shoveled to an array, but since there is nothing that points to that array, it gets garbage collected.  The solution is to initialize my hash with a block that will, as a default, explicitly assign an empty array to the non-existant key.  That is, instead of initializing my hash with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">songs_by_artist</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p> I can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">songs_by_artist</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span><span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So when <code>songs_by_artist[artist] &lt;&lt; song_name</code> executes for a non-existant artist, the hash will create an empty array, assign it as the value of <code>songs_by_artist[artist]</code>, and then shovel <code>song_name</code> onto that array.</p>

<p>My final code, which passes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">organize_songs_by_artist</span><span class="p">(</span><span class="n">songs</span><span class="p">)</span>
</span><span class='line'>  <span class="n">songs_by_artist</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="nb">hash</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">songs</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">song</span><span class="o">|</span>
</span><span class='line'>    <span class="n">artist</span><span class="p">,</span> <span class="n">song_name</span> <span class="o">=</span> <span class="n">song</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; - &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">songs_by_artist</span><span class="o">[</span><span class="n">artist</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">song_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">songs_by_artist</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
