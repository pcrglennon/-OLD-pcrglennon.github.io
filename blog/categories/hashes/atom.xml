<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Hashes | Peter Glennon]]></title>
  <link href="http://pcrglennon.github.io/blog/categories/hashes/atom.xml" rel="self"/>
  <link href="http://pcrglennon.github.io/"/>
  <updated>2014-07-11T09:30:58-04:00</updated>
  <id>http://pcrglennon.github.io/</id>
  <author>
    <name><![CDATA[Peter Glennon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby's Hash.new and {}]]></title>
    <link href="http://pcrglennon.github.io/blog/2014/06/10/rubys-hash-dot-new-and-%7B%7D/"/>
    <updated>2014-06-10T21:18:18-04:00</updated>
    <id>http://pcrglennon.github.io/blog/2014/06/10/rubys-hash-dot-new-and-{}</id>
    <content type="html"><![CDATA[<p>In a recent lab exercise at Flatiron, we were tasked with tallying the occurences of a word in a given sentence.  My first shot, as a Ruby newbie (Rubie?  Nuby?):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">count_words</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span>
</span><span class='line'>  <span class="n">occurences</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">sentence</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">word</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if occurences[word]</span>
</span><span class='line'><span class="sr">  occurences[word] += 1</span>
</span><span class='line'><span class="sr">else</span>
</span><span class='line'><span class="sr">  occurences[word] = 1</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">  occurences</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And it worked.  But it felt bulky, like there must be a more concise way.  Looking over the spec file, I saw a comment which advised using <code>Hash.new(0)</code> rather than <code>{}</code>.  There were two things I didn&rsquo;t understand.  1: that <code>Hash.new</code> and <code>{}</code> were different, and 2: that it looked like you could pass <code>Hash.new</code> an argument!</p>

<h3>Hash.new(0)?</h3>

<p>Googling &ldquo;Ruby Hash.new vs. braces&rdquo; led to <a href="http://www.developwithpurpose.com/ruby-hash-awesomeness-part-1/">this blog post</a> elaborating on the differences between the two methods of hash construction.  Constructing as hash like this:
<code>ruby
hash = {"a" =&gt; 1, "b" =&gt; 2}
</code>
allows you to initialize the hash with data all on one line.  Whereas using <code>Hash.new</code> can only return an empty hash.  What <code>Hash.new</code> can do, though, is accept an argument.  As the author of that post points out, that argument is the default value for the hash, in place of <code>nil</code>.  For example:</p>

<p>```ruby
hash_1 = {}          # Empty hash
hash_1[:a]           # nil</p>

<p>hash_2 = Hash.new(0) # Empty hash
hash_2[:a]           # 0
```</p>

<p>This was perfect!  If I could set the default value for my <code>occurences</code> hash to 0, I could eliminate most of the code in my each block, reducing it to:
```ruby
  sentence.split(&ldquo; &rdquo;).each do |word|</p>

<pre><code>occurences[word] += 1
</code></pre>

<p>  end
```</p>

<p>This works because <code>occurences[word] += 1</code> really means <code>occurences[word] = occurences[word] + 1</code>. As the default value of <code>occurences</code> is 0, whenever a new word is found, <code>occurences[word]</code> is set to 0 + 1.  The tests pass, and I&rsquo;m satisfied.  On to the next one.</p>

<h3>Hash.new([]): humbled again</h3>

<p>Next problem: organize a list of songs, in the format of an &ldquo;Artist &ndash; Song&rdquo; String, into a hash of this format: artist => array of songs.  With my newfound knowledge of default Hash values, I jumped in like this:</p>

<p>```ruby
def organize_songs_by_artist(songs)
  songs_by_artist = Hash.new([])
  songs.each do |song|</p>

<pre><code>artist, song_name = song.split(" - ")
songs_by_artist[artist] &lt;&lt; song_name
</code></pre>

<p>  end
  songs_by_artist
end
```</p>

<p>With an empty array as the default Hash value, this should work just like the previous question!  Right?</p>

<p>Well no, of course it didn&rsquo;t.  I was returned an empty hash.  I look back over my code, and try some quick tests in irb, to no avail.  Puzzled, I throw myself once again upon the mercy of Google.</p>

<p>As often happens, I found a <a href="http://stackoverflow.com/questions/2552579/ruby-method-array-not-updating-the-array-in-hash">StackOverflow question</a> from somehow having a very similar problem.  They&rsquo;re using yet another method of initializing a Hash, using a block:</p>

<p><code>ruby
  h = Hash.new{Array.new}
</code></p>

<p>I didn&rsquo;t know you could do that, but looking at the <a href="http://www.ruby-doc.org/core-2.1.2/Hash.html#method-c-new">Hash documentation</a> explains that this method will cause the block to execute and return a default value.  That&rsquo;s pretty neat, but the same problem is present.  It looks like nothing shoveled onto the default empty array is saved.</p>

<p><a href="http://stackoverflow.com/a/2552946/3536464">The top answer</a> does an excellent job of explaining this confusing behavior.</p>

<p>I don&rsquo;t think I fully understand it, but what I got from this answer is that when I call <code>songs_by_artist[artist] &lt;&lt; song_name</code> for an artist that is not yet in the hash, it evaluates to this: <code>[] &lt;&lt; song_name</code>.  So the value DOES get shoveled to an array, but since there is nothing that points to that array, it gets garbage collected.  The solution is to initialize my hash with a block that will, as a default, explicitly assign an empty array to the non-existant key.  That is, instead of initializing my hash with this:</p>

<p><code>ruby
 songs_by_artist = Hash.new([])
</code></p>

<p> I can do this:</p>

<p><code>ruby
   songs_by_artist = Hash.new{|hash, key| hash[key] = []}
</code></p>

<p>So when <code>songs_by_artist[artist] &lt;&lt; song_name</code> executes for a non-existant artist, the hash will create an empty array, assign it as the value of <code>songs_by_artist[artist]</code>, and then shovel <code>song_name</code> onto that array.</p>

<p>My final code, which passes:</p>

<p>```ruby
def organize_songs_by_artist(songs)
  songs_by_artist = Hash.new{ |hash, key| hash[key] = [] }
  songs.each do |song|</p>

<pre><code>artist, song_name = song.split(" - ")
songs_by_artist[artist] &lt;&lt; song_name
</code></pre>

<p>  end
  songs_by_artist
end
```</p>
]]></content>
  </entry>
  
</feed>
